<?xml version="1.0" encoding="UTF-8"?>
 
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<!-- dev.mvc.tourgrp.tourgrpDAOInter 패키지에 등록된 interface 명시,
      패키지명과 인터페이스명은 실제로 존재해야함,
      Spring이 내부적으로 자동으로 interface를 구현해줌. -->
<mapper namespace="dev.mvc.contents.ContentsDAOInter"> 

 <!--  <insert id="create" parameterType="dev.mvc.contents.ContentsVO">
    INSERT INTO contents(adminno, tourno, title, content, passwd, word,
                                     file1, file1saved, thumb1, size1, rdate, salecnt)
    VALUES(#{adminno}, #{tourno}, #{title}, #{content}, #{passwd}, #{word},
                #{file1}, #{file1saved}, #{thumb1}, #{size1}, now(), #{salecnt})
  </insert> -->
  
  <!--  연속 입력 지원 등록 -->
  <insert id="create" parameterType="dev.mvc.contents.ContentsVO"
            useGeneratedKeys="true" keyProperty="contentsno">
    INSERT INTO contents(adminno, tourno, title, content, passwd, word,
                                     file1, file1saved, thumb1, size1, rdate, salecnt)
    VALUES(#{adminno}, #{tourno}, #{title}, #{content}, #{passwd}, #{word},
                #{file1}, #{file1saved}, #{thumb1}, #{size1}, now(), #{salecnt})
  </insert>
  

  
    <select id="list_by_tourno" parameterType="int" resultType="dev.mvc.contents.ContentsVO">
     SELECT contentsno, adminno, tourno, title, content, recom, cnt, replycnt, rdate,
             file1, file1saved, thumb1, size1, price, dc, saleprice, point
    FROM contents
    WHERE tourno=#{tourno}
    ORDER BY contentsno DESC
  </select>
  
  <!-- 카테고리별 검색 목록 -->
  <select id="list_by_tourno_search" resultType="dev.mvc.contents.ContentsVO" 
             parameterType="HashMap">
    SELECT contentsno, adminno, tourno, title, content, recom, cnt, replycnt, rdate,
            file1, file1saved, thumb1, size1, price, dc, saleprice, point
    FROM contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
        WHERE tourno=#{tourno}
      </when>
      <otherwise> <!-- 검색하는 경우 -->
         WHERE tourno=#{tourno} AND (
                                                     title LIKE CONCAT('%',#{word},'%') 
                                                     OR content LIKE CONCAT('%',#{word},'%') 
                                                     OR word LIKE CONCAT('%',#{word},'%')
                                                   ) 
      </otherwise>
    </choose>
    ORDER BY contentsno DESC   
  </select>
   
  <!-- 카테고리별 검색 레코드 갯수 -->
  <select id="search_count" resultType="int" parameterType="HashMap">
    SELECT COUNT(*) as cnt
    FROM contents
    <choose>
      <when test="word == null or word == ''"> <!-- 검색하지 않는 경우의 레코드 갯수 -->
        WHERE tourno=#{tourno}
      </when>
      <otherwise> <!-- 검색하는 경우의 레코드 갯수 -->
        WHERE tourno=#{tourno} AND (
                                                     title LIKE CONCAT('%',#{word},'%') 
                                                     OR content LIKE CONCAT('%',#{word},'%') 
                                                     OR word LIKE CONCAT('%',#{word},'%')
                                                   )          
      </otherwise>
    </choose>
  </select>
  
 <!-- 카테고리별 검색 목록 + 페이징 + 메인 이미지 -->   
  <select id="list_by_tourno_search_paging" 
             resultType="dev.mvc.contents.ContentsVO" parameterType="HashMap">
   SELECT contentsno, adminno, tourno, title, content, recom, cnt, replycnt, rdate,
              file1, file1saved, thumb1, size1, price, dc, saleprice, point
   FROM contents
   <choose>
     <when test="word == null or word == ''"> <!-- 검색하지 않는 경우 -->
       WHERE tourno=#{tourno}
     </when>
     <otherwise>
        WHERE tourno=#{tourno} AND (title LIKE CONCAT('%', #{word}, '%') 
                                                       OR content LIKE CONCAT('%', #{word}, '%') 
                                                       OR word LIKE CONCAT('%', #{word}, '%'))
     </otherwise>
   </choose>
   ORDER BY contentsno DESC
   LIMIT #{offset}, #{page_size}
     
<!--  1 page: LIMIT 0, 10 
        2 page: LIMIT 10, 10
        3 page: LIMIT 20, 10 -->
     
  </select>
  
  
  
  <!-- 상품 정보  -->
  <update id="update" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents 
    SET price=#{price}, dc=#{dc}, saleprice=#{saleprice}, point=#{point}
    WHERE contentsno=#{contentsno}
  </update>
  
  
  <!--  일반적인 조회 -->
  <select id="read" resultType="dev.mvc.contents.ContentsVO" parameterType="int">
    SELECT contentsno, adminno, tourno, title, content, recom, cnt, replycnt, passwd, word, rdate,
              file1, file1saved, thumb1, size1, price, dc, saleprice, point, salecnt
    FROM contents
    WHERE contentsno = #{contentsno}
  </select>
  
  <!-- 상품 정보 변경 -->
  <update id="product_update" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET price=#{price}, dc=#{dc}, saleprice=#{saleprice}, point=#{point}
    WHERE contentsno = #{contentsno}
  </update> 
  
  <!-- 텍스트 수정 -->
  <update id="update_text" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET title=#{title}, content=#{content},  word=#{word}, 
          price=#{price}, dc=#{dc}, saleprice=#{saleprice}, point=#{point}, salecnt=#{salecnt}
    WHERE contentsno = #{contentsno}
  </update>
  
   <!-- 파일 수정 -->
  <update id="update_file" parameterType="dev.mvc.contents.ContentsVO">
    UPDATE contents
    SET file1=#{file1}, file1saved=#{file1saved}, thumb1=#{thumb1}, size1=#{size1}
    WHERE contentsno = #{contentsno}
  </update>
  
  <delete id="delete" parameterType="int">
    DELETE FROM contents
    WHERE contentsno=#{contentsno}
  </delete>
  
  <!-- 추천 -->
  <update id="update_recom" parameterType="int">
    UPDATE contents
    SET recom = recom + 1
    WHERE contentsno = #{contentsno}
  </update>
  
  <!-- 특정 그룹에 속한 레코드 갯수 산출 -->
  <select id="count_by_tourno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM contents 
    WHERE tourno=#{tourno}
  </select>  

  <!-- 특정 관리자에 속한 레코드 갯수 산출 -->
  <select id="count_by_adminno" resultType="int" parameterType="int">
    SELECT COUNT(*) as cnt 
    FROM contents 
    WHERE adminno=#{adminno}
  </select>  
  
  <!-- 다수의 tourno를 전달하여 contents 레코드 삭제 -->
  <delete id="delete_contents_by_all_tourno" parameterType="Map">
    DELETE FROM contents
    WHERE tourno IN 
    <foreach collection="tournos_list" item="codeno" separator="," open="(" close=")">
      #{codeno}
    </foreach>
  </delete>
     

  
  
  

         
</mapper> 